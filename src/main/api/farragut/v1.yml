openapi: 3.0.3
info:
  title: Farragut Web Application API
  version: 1.0.0
servers:
  - url: /api
    description: Local server
  - url: https://farragut.avereon.com/api
    description: Production server

paths:
  /api/camp:
    get:
      #      x-spring-paginated: true
      summary: Get all camps
      operationId: getCamps
      tags:
        - camp
      description: Retrieves a paginated list of all camps.
      parameters:
        - in: query
          name: pageable
          required: false
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        200:
          description: A page of camps
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'

  /api/camp/{id}:
    get:
      summary: Get camp by ID
      operationId: getCamp
      tags:
        - camp
      description: Retrieves information about a specific camp.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: The camp requested
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Camp"

  /api/company:
    get:
      #      x-spring-paginated: true
      summary: Get all companies
      operationId: getCompanies
      tags:
        - company
      description: Retrieves a paginated list of all companies.
      parameters:
        - in: query
          name: pageable
          required: false
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        200:
          description: A page of companies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'

  /api/company/{id}:
    get:
      summary: Get company by ID
      operationId: getCompany
      tags:
        - company
      description: Retrieves information about a specific company.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: The company requested
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Company"

  /api/company/{id}/persons:
    get:
      summary: Get company persons by ID
      operationId: getCompanyPersons
      tags:
        - company
        - person
      description: Retrieves the list of persons for a specific company.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'

  /api/person/{id}:
    get:
      summary: Get person by ID
      operationId: getPerson
      tags:
        - person
      description: Retrieves information about a specific person.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: The company requested
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Company"

  /api/oauth/login:
    post:
      summary: Login a user
      operationId: login
      tags:
        - authentication
      description: Pass user credentials in the request payload to authenticate a 
        user. If authenticated this will return signed JWT that the user can use
        for subsequent calls.
      responses:
        200:
          description: The signed JWT

  /api/oauth/logout:
    post:
      summary: Logout a user
      operationId: logout
      tags:
        - authentication
      description: Logout the authenticated user.
      responses:
        200:
          description: This endpoint will always return 200, regardless.

#  grant_type=password
#  &username=user@example.com
#  &password=1234luggage
#  &client_id=xxxxxxxxxx
#  &client_secret=xxxxxxxxxx

components:
  schemas:
    Company:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: 'The company UUID as generated by the system.'
          example: '550e8400-e29b-41d4-a716-446655440000'
        name:
          type: string
          description: 'The company name.'
          example: 'Company A'
        year:
          type: integer
          description: 'The year the company was organized.'
          example: 2021
        campId:
          type: string
          format: uuid
          description: 'The camp UUID as generated by the system.'
          example: '550e8400-e29b-41d4-a716-446655440005'

    Pageable:
      description: Minimal page object
      type: object
      properties:
        page:
          type: integer
        size:
          type: integer

    Page:
      description: Minimal page object
      type: object
      properties:
        page:
          type: integer
        size:
          type: integer
        totalPages:
          type: integer
        totalCount:
          type: integer
          format: int64
        values:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Camp'
              - $ref: '#/components/schemas/Company'

#    CampPage:
#      description: Camp page
#      type: object
#      allOf:
#        - $ref: '#/components/schemas/Page'
#      properties:
#        values:
#          type: array
#          items:
#            oneOf:
#              - $ref: '#/components/schemas/Camp'
#
#    CompanyPage:
#      description: Company page
#      type: object
#      allOf:
#        - $ref: '#/components/schemas/Page'
#      properties:
#        values:
#        type: array
#        items:
#            oneOf:
#            - $ref: '#/components/schemas/Company'

    Person:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: 'The person UUID as generated by the system.'
          example: '550e8400-e29b-41d4-a716-446655440001'
        familyName:
          type: string
          description: 'The persons family name.'
          example: 'Doe'
        givenName:
          type: string
          description: 'The persons given name.'
          example: 'John'

    Photo:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: 'The photo UUID as generated by the system.'
          example: '550e8400-e29b-41d4-a716-446655440002'
        frontScanId:
          type: string
          format: uuid
          description: 'The front scan UUID as generated by the system.'
          example: '550e8400-e29b-41d4-a716-446655440003'
        backScanId:
          type: string
          format: uuid
          description: 'The back scan UUID as generated by the system.'
          example: '550e8400-e29b-41d4-a716-446655440004'

    Scan:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: 'The scan UUID as generated by the system.'
        file:
          type: string
          description: 'The file name of the scan.'
          example: 'scan.jpg'

    Camp:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: 'The camp UUID as generated by the system.'
          example: '550e8400-e29b-41d4-a716-446655440005'
        name:
          type: string
          description: 'The camp name.'
          example: 'Bennion'
